import 'dotenv/config';
import { pinata } from "../lib/pinata";
import { createReadStream, writeFileSync } from "fs";
import { join } from "path";

async function uploadDatabase() {
  try {
    // Create a new group or use existing one
    const groupName = `diversity-scorecard-${process.env.NODE_ENV}`;
    let groupId = process.env.PINATA_GROUP_ID;

    if (!groupId) {
      const result = await pinata.pinList({ status: 'pinned' });
      console.log("Connected to Pinata successfully");
      
      // Create a new file with metadata
      const dbPath = join(process.cwd(), "app/database/snapshots/base.db");
      const readStream = createReadStream(dbPath);
      
      const options = {
        pinataMetadata: {
          name: "diversity-scorecard-db"
        },
        pinataOptions: {
          customPinPolicy: {
            regions: [
              {
                id: 'FRA1',
                desiredReplicationCount: 1
              }
            ]
          }
        }
      };

      const upload = await pinata.pinFileToIPFS(readStream, options);
      console.log("Database uploaded to Pinata:", upload);
      
      // Update constants.ts with new CID
      const constantsPath = join(process.cwd(), "app/database/constants.ts");
      const constantsContent = `// This file is auto-generated by the upload script - DO NOT EDIT
export const DATABASE_CID = '${upload.IpfsHash}';\n`;
      writeFileSync(constantsPath, constantsContent);
      console.log("Updated constants.ts with new CID");
    } else {
      // Update existing pin
      const dbPath = join(process.cwd(), "app/database/snapshots/base.db");
      const readStream = createReadStream(dbPath);
      
      const options = {
        pinataMetadata: {
          name: "diversity-scorecard-db"
        },
        pinataOptions: {
          customPinPolicy: {
            regions: [
              {
                id: 'FRA1',
                desiredReplicationCount: 1
              }
            ]
          }
        }
      };

      const upload = await pinata.pinFileToIPFS(readStream, options);
      console.log("Database updated on Pinata:", upload);
      
      // Update constants.ts with new CID
      const constantsPath = join(process.cwd(), "app/database/constants.ts");
      const constantsContent = `// This file is auto-generated by the upload script - DO NOT EDIT
export const DATABASE_CID = '${upload.IpfsHash}';\n`;
      writeFileSync(constantsPath, constantsContent);
      console.log("Updated constants.ts with new CID");
    }

  } catch (error) {
    console.error("Error uploading database:", error);
    process.exit(1);
  }
}

uploadDatabase().catch(console.error);
