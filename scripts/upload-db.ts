import PinataClient from '@pinata/sdk';
import { readFileSync, writeFileSync, unlinkSync, existsSync, copyFileSync, createReadStream } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { config } from 'dotenv';
import { execSync } from 'child_process';

// Load environment variables from .env files
config({ path: '.env.local' });
config(); // also load from .env

// ESM equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function uploadDatabase() {
  if (!process.env.PINATA_API_KEY || !process.env.PINATA_API_SECRET) {
    console.error('Missing Pinata API credentials. Please set PINATA_API_KEY and PINATA_API_SECRET in .env.local');
    process.exit(1);
  }

  const pinata = new PinataClient(
    process.env.PINATA_API_KEY,
    process.env.PINATA_API_SECRET
  );

  try {
    // Check if base database exists, if not create it
    const baseDbPath = join(__dirname, '../app/database/snapshots/base.db');
    if (!existsSync(baseDbPath)) {
      console.log('Base database not found, creating it...');
      execSync('pnpm run db:create', { stdio: 'inherit' });
    }

    // Copy base.db to initial.db
    const initialDbPath = join(__dirname, '../app/database/initial.db');
    console.log('Copying base database to initial.db...');
    copyFileSync(baseDbPath, initialDbPath);

    console.log('Reading database file...');
    const readStream = createReadStream(initialDbPath);

    console.log('Uploading database to Pinata...');
    
    const result = await pinata.pinFileToIPFS(readStream, {
      pinataMetadata: {
        name: 'diversity_scorecard.db'
      }
    });

    console.log('Upload successful!');
    console.log('CID:', result.IpfsHash);

    // Update the constants file with the new CID
    const constantsPath = join(__dirname, '../app/database/constants.ts');
    
    // Delete the file if it exists
    if (existsSync(constantsPath)) {
      console.log('Removing old constants file...');
      unlinkSync(constantsPath);
    }

    // Create a fresh constants file
    console.log('Creating new constants file...');
    const constantsContent = `// This file is auto-generated by the upload script - DO NOT EDIT
export const DATABASE_CID = '${result.IpfsHash}';
`;
    writeFileSync(constantsPath, constantsContent, { flag: 'w' });
    console.log('Updated CID in constants file');

  } catch (error) {
    console.error('Error uploading to Pinata:', error);
    process.exit(1);
  }
}

uploadDatabase(); 